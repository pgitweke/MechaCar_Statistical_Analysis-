?read.csv
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
library(dplyr)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
# Read Csv file
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
setwd("C:/Users/petam/R_Analysis/01_Demo")
# Read Csv file
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
# Read json file
library(jsonlite)
demo_table2 <- fromJSON(txt =  'demo.json')
# select the third row of the Year column using bracket notation (from demo_table)
# Option 1
demo_table[3,"Year"]
# Option 2
demo_table[3, 3]
# Option 3 (Select entire column)
demo_table$"Vehicle_Class"
# Select specific data from a row in a specific column
demo_table$"Vehicle_Class"[2]
# Filter so that we only have rows where the vehicle price is greater than $10,000
# from the demo_table2
filter_table <- demo_table2[demo_table2$price > 10000,]
#filter by price and drivetrain
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status)
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
# sample a large vector and create a smaller vector. set the vector to "x":
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
num_rows <- 1:nrow(demo_table)
sample_rows <- sample(num_rows, 3)
demo_table[sample_rows,]
# Combine all three steps above into one block of code
demo_table[sample(1:nrow(demo_table), 3),]
# add columns to original data frame mutate()
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
#create summary table
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep')
View(summarize_demo)
#create summary table with multiple columns
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep')
View(filter_table2)
View(summarize_demo)
?gather
?gather()
?gather()
?gather()
?sample()
?gather()
# Read Csv file
demo_table3 <- read.csv(file='demo2.csv',check.names=F,stringsAsFactors = F)
View(demo_table3)
# Read Csv file
demo_table10 <- read.csv(file='Vehicle_Data.xlsx',check.names=F,stringsAsFactors = F)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
setwd("C:/Users/petam/R_Analysis/MechaCar_Statistical_Analysis-")
# Load dplyr package.
mechanic_data < - read.csv(file = 'MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
setwd("C:/Users/petam/R_Analysis/MechaCar_Statistical_Analysis-/Resources")
# Load dplyr package.
mechanic_data < - read.csv(file = 'MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
# Load dplyr package.
mechanic_table < - read.csv(file = 'MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
# Load dplyr package.
mechanic_data < - read.csv(file = 'MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
# Load dplyr package.
library(dplyr)
mechanic_data < - read.csv(file = 'MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
library(dplyr)
mechanic_data < - read.csv(file = 'MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
setwd("C:/Users/petam/R_Analysis/MechaCar_Statistical_Analysis-/Resources")
mechanic_data < - read.csv(file = 'MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
demo_table <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
View(demo_table)
mecha_table <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# Import and read file as a dataframe.
mecha_table <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# Import and read file as a dataframe.
mecha_table <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
View(mecha_table)
# Perform linear regression using the lm() function.
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mecha_table)
# Using the summary() function, determine the p-value and the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mecha_table))
### DELIVERABLE 2
suspension_coil <- read.csv(file ='Suspension_Coil.csv',check.names = F,stringsAsFactors = F)
View(suspension_coil)
# Create a total_summary dataframe using the summarize() function to get
# the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
total_summary <- suspension_coil %>% summarize(Mean_PSI=mean(PSI),
Median_PSI=median(PSI),
var_PSI=var(PSI),
Std_Dev_PSI=sd(PSI),
Num_coil=n(), .groups = 'keep')
View(total_summary)
View(total_summary)
# Create a total_summary dataframe using the summarize() function to get
# the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
total_summary <- suspension_coil %>% summarize(Mean_PSI=mean(PSI),
Median_PSI=median(PSI),
Var_PSI=var(PSI),
Std_Dev_PSI=sd(PSI),
Num_coil=n(), .groups = 'keep')
View(total_summary)
# Create a total_summary dataframe using the summarize() function to get
# the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
total_summary <- suspension_coil %>% summarize(Mean_PSI=mean(PSI),
Median_PSI=median(PSI),
Variance_PSI=var(PSI),
Std_Dev_PSI=sd(PSI),
Num_coil=n(), .groups = 'keep')
View(total_summary)
# Create a lot_summary dataframe using the group_by() and the summarize() functions to group each manufacturing lot
# by the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
lot_summary <- suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI),
Median_PSI=median(PSI),
Variance_PSI=var(PSI),
Std_Dev_PSI=sd(PSI),
Num_Coil=n(), .groups = 'keep')
View(lot_summary)
